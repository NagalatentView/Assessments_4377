# -*- coding: utf-8 -*-
"""LVADSUSR169_Nandini_Internal_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eYTV4Opry7P7nkPDxJfoOXaWCldPFYyj
"""

#1
import numpy as np
arr = np.array([1,2,3,4,5,6,7,8,9])
minimum = np.min(arr)
maximum = np.max(arr)
sum = np.sum(arr)
mean = np.mean(arr)
std = np.std(arr)
print(minimum,maximum,sum,mean,std)

#2
health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])
height = health_data[:,0]
weigth = health_data[:,1]
age = health_data[:,2]

avg_height = np.mean(height)
std_height = np.std(height)

avg_weigth = np.mean(weigth)
std_weigth = np.std(weigth)

avg_age = np.mean(age)
std_age = np.std(age)

print(avg_height,std_height)
print(avg_weigth,std_weigth)
print(avg_age,std_age)

#3
arr= np.arange(-1,8).reshape(3,3)

student1 = arr[0,:]
student2= arr[1,:]
student3 = arr[2,:]


def mean(arr):
  sum =0
  for i in arr:
    if i != -1:
       sum+=i
  return sum/len(arr)

student1_mean = mean(student1)
student2_mean = mean(student2)
student3_mean = mean(student3)

print(student1_mean,student2_mean,student3_mean)

#4
temp_arr = np.linspace(15,25,24)
temp_arr

#5
import numpy as np
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120,0,0,0])
daily_closing_prices
window_size = 5
a = np.split(daily_closing_prices,2)
z = []
for i in a:
  x = np.mean(i)
  z.append(x)

sum = 0
for i in z:
  sum+=i

print(f'the rolling average is {sum}')

#6
mean_vector = [0,0]
covar_mat = [[1,0.5],[0.5,2]]
vect = np.dot(mean_vector,covar_mat)
samples = np.arange(0,100).reshape(10,10)
vect
samples

#7
import numpy as np
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])
determinant = np.linalg.det(properties_matrix)

#8
arr = np.arange(0,9).reshape(3,3)
bol = arr > 5
print('the boolean array')
print(bol)
print('array using boolean')
print(arr[bol])

#9
import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}
df9 = pd.DataFrame(data)
condition = (df9['Age'] < 45) & (df9['Department'] != 'HR')
conditioned =df9[condition]
print(conditioned[['Name','City']])

#10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}

df10 = pd.DataFrame(data)
some_res = df10.groupby('Salesperson').aggregate({'Sales':'mean'})
some_res_sorted = some_res.sort_values(by='Sales',ascending=False)
some_res_sorted['rank'] = [1,2,3,4,5]
some_res_sorted

#11
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}
df11 = pd.DataFrame(data)
condition = df11['Promotion'] == False
conditioned = df11[condition]
some_res = (conditioned.groupby('Category').aggregate({'Price':'mean'}))
print(some_res)
print(conditioned)

#12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Dataset of employee project assignments
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}

#13
df = pd.read_csv('/content/sample_data/Q13_sports_team_stats.csv')
df.describe()
# by this describe we can analyze the values we can get the insight

#14
df14 = pd.read_csv('/content/sample_data/Q14_customer_purchases.csv')
df14.describe()

#15
df15 = pd.read_csv('/content/sample_data/Q15_student_grades.csv')
df15
df15.groupby(['StudentID','Subject']).aggregate({'Grade':'mean'})