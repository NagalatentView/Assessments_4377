# -*- coding: utf-8 -*-
"""LVADSUSR169_nandini_linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Um9nhe1cJU14fYjFoz03Xm47f4EfzEmN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.metrics import confusion_matrix,r2_score,mean_squared_error,classification_report,mean_squared_error
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/sample_data/expenses.csv')

df.info()

df.describe()

df.isnull().sum()

df['bmi'].value_counts()

#1.5 a
#bmi null values are filled with the mean value of the bmi which is grouped by age
df['bmi'] = df.groupby(['age'])['bmi'].fillna(value = 'mean')

cat_cols=df.select_dtypes(include=['object']).columns
num_cols = df.select_dtypes(include=np.number).columns

#1.5.b
#outliers are detected by the boxplot which are in the target column soo no modification
for col in num_cols:

    plt.figure(figsize = (15, 4))
    sns.boxplot(x=df[col])
    plt.show()

#1.5.2
#the labels are encoded acoordingly using the LabelEncoder function
req_cols = ['sex','smoker','region']
for col in req_cols:
  df[col] = LabelEncoder().fit_transform(df[col])



df

df[df.duplicated()== True]

df.drop_duplicates()

for col in num_cols:
    df[col].hist(grid=False)
    plt.ylabel('count')
    plt.xlabel(col)
    plt.show()

for col in cat_cols:
  df[col].value_counts().plot(kind = 'bar')
  plt.xlabel(col)
  plt.ylabel('count')
  plt.show()

cor_mat = df[num_cols].corr()
sns.heatmap(cor_mat,annot = True, fmt = '.2',cmap = 'coolwarm')

x = df.drop(columns = ['charges'])
y = df['charges']

x.shape,y.shape

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 4)

model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

r2score = r2_score(y_test,y_pred)
r2score

rmse = mean_squared_error(y_test,y_pred)
rmse



