# -*- coding: utf-8 -*-
"""LVADSUSR169_nandini_logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQZxkQ5zWw7y1s-jDcmZ8MloOHy_xBDU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.metrics import confusion_matrix,r2_score,mean_squared_error,classification_report
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.model_selection import train_test_split

df2 = pd.read_csv('/content/sample_data/booking.csv')

df2.info()

df2.drop(columns = ['Booking_ID'])

df2.isnull().sum()

df2['average price'] = df2['average price'].fillna(value = df2['average price'].mean())

df2.drop(columns = ['room type'])

df2.describe()

cat_cols=df2.select_dtypes(include=['object']).columns
num_cols = df2.select_dtypes(include=np.number).columns

for col in num_cols:

    plt.figure(figsize = (15, 4))
    sns.boxplot(x=df2[col])
    plt.show()

for col in cat_cols:
  df2[col] = LabelEncoder().fit_transform(df2[col])

for col in num_cols:
    df2[col].hist(grid=False)
    plt.ylabel('count')
    plt.xlabel(col)
    plt.show()

for col in cat_cols:
  df2[col].value_counts().plot(kind = 'bar')
  plt.xlabel(col)
  plt.ylabel('count')
  plt.show()

cor_mat = df2[num_cols].corr()
sns.heatmap(cor_mat,annot = True, fmt = '.2',cmap = 'coolwarm')

df2.duplicated().value_counts()

df2.info()

x= df2.drop(columns = ['booking status','car parking space','number of week nights','type of meal'])
y = df2['booking status']

x.shape , y.shape

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 3)

model2 = LogisticRegression()
model2.fit(x_train,y_train)

y_pred = model2.predict(x_test)
y_pred

print(classification_report(y_test,y_pred))

print(confusion_matrix(y_test,y_pred))

from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt
fpr, tpr, thresholds = roc_curve(y_test, y_pred)

# Plot ROC curve
plt.plot(fpr, tpr, label='ROC Curve')
plt.plot([0, 1], [0, 1], linestyle='--', label='Random Guessing')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()
plt.show()













